import pandas as pd
df = pd.read_csv('/content/sample_data/cancer_classification.csv')
df
y = df['benign_0__mal_1']
y

x = df.drop('benign_0__mal_1' , axis = 1)
x

from sklearn.model_selection import train_test_split 

x_train , x_test , y_train , y_test = train_test_split(x , y , train_size = 0.2 , random_state = 100)

x_train
x_test
y_train
y_test

from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(x_train , y_train)

y_lr_train_pred = lr.predict(x_train)
y_lr_test_pred = lr.predict(x_test)

print(y_lr_train_pred , y_lr_test_pred)

from sklearn.metrics import mean_squared_error , r2_score

lr_train_mse = mean_squared_error(y_train , y_lr_train_pred)
lr_train_r2 = r2_score(y_train , y_lr_train_pred)

lr_test_mse = mean_squared_error(y_test , y_lr_test_pred)
lr_test_r2 = r2_score(y_test , y_lr_test_pred)

print('lr mse (train:)' , lr_train_mse)
print('lr r2  (train:)' , lr_train_r2)
print('lr mse (test:)' , lr_test_mse)
print('lr mse (test:)' , lr_test_mse)


lr_results = pd.DataFrame(['linear regression', lr_train_mse ,lr_train_r2 ,lr_test_mse , lr_test_mse ]).transpose()


lr_results

from sklearn.ensemble  import RandomForestRegressor

rf = RandomForestRegressor(max_depth=2 , random_state=100)
rf.fit(x_train ,  y_train)

y_rf_train_pred = rf.predict(x_train)
y_rf_test_pred = rf.predict(x_test)

from sklearn.metrics import mean_squared_error , r2_score

rf_train_mse = mean_squared_error(y_train , y_rf_train_pred)
rf_train_r2 = r2_score(y_train , y_rf_train_pred)

rf_test_mse = mean_squared_error(y_test , y_rf_test_pred)
rf_test_r2 = r2_score(y_test , y_rf_test_pred)

rf_results = pd.DataFrame(['linear regression', rf_train_mse ,rf_train_r2 ,rf_test_mse , rf_test_mse ]).transpose()

rf_results

df_models = pd.concat([lr_results , rf_results])
df_models
df_models.reset_index(drop=True)

import matplotlib.pyplot as plt

plt.figure(figsize=(5,5))
plt.scatter(x=y_train, y=y_lr_train_pred,  alpha=0.3)
plt.plot()
plt.ylabel('predict benign_0__mal_1 ')
plt.xlabel('experimental benign_0__mal_1')